% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vendor.R
\name{vendor}
\alias{vendor}
\title{Vendor renv in an R package}
\usage{
vendor(version = NULL, sources = NULL, project = getwd())
}
\arguments{
\item{version}{The version of renv to vendor. A Git tag targets a CRAN
version and "main" references the latest development version of renv. Use
a Git branch name or commit SHA to target other versions. Ignored when
\code{sources} is non-\code{NULL}.}

\item{sources}{The path to local renv sources to be vendored.}

\item{project}{The project in which renv should be vendored.}
}
\description{
Calling \code{renv:::vendor()} will:
\itemize{
\item Compile a vendored copy of renv to \code{inst/vendor/renv.R},
\item Generate an renv auto-loader at \code{R/renv.R}.
}

Using this, projects can take a dependency on renv, and use renv
internals, in a CRAN-compliant way. After vendoring renv, you can
use renv APIs in your package via the embedded renv environment;
for example, you could call the \code{\link[=dependencies]{dependencies()}} function with:

\if{html}{\out{<div class="sourceCode">}}\preformatted{renv$dependencies()
}\if{html}{\out{</div>}}

Be aware that renv internals might change in future releases, so if you
need to rely on renv internal functions, we strongly recommend testing
your usages of these functions to avoid potential breakage.
}
\keyword{internal}
