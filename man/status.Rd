% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/status.R
\name{status}
\alias{status}
\title{Report differences between lockfile and project library}
\usage{
status(
  project = NULL,
  ...,
  library = NULL,
  lockfile = NULL,
  sources = TRUE,
  cache = FALSE
)
}
\arguments{
\item{project}{The project directory. If \code{NULL}, then the active project will
be used. If no project is currently active, then the current working
directory is used instead.}

\item{...}{Unused arguments, reserved for future expansion. If any arguments
are matched to \code{...}, renv will signal an error.}

\item{library}{The library paths. By default, the library paths associated
with the requested project are used.}

\item{lockfile}{Path to a lockfile. When \code{NULL} (the default), the \code{renv.lock} located in the root of the current project will be used.}

\item{sources}{Boolean; check that each of the recorded packages have a
known installation source? If a package has an unknown source, renv
may be unable to restore it.}

\item{cache}{Boolean; perform diagnostics on the global package cache?
When \code{TRUE}, renv will validate that the packages installed into the
cache are installed at the expected + proper locations, and validate the
hashes used for those storage locations.}
}
\value{
This function is normally called for its side effects, but
it invisibly returns a list containing the following components:
\itemize{
\item \code{library}: packages in your library.
\item \code{lockfile}: packages in the lockfile.
\item \code{synchronized}: are the library and lockfile in sync?
}
}
\description{
Report differences between the project's lockfile and the current state of
the project's library (if any).
}
\section{Missing packages}{
First resolve any problems with packages that aren’t installed and then call
\code{renv::status()} again. This is important do to first because if any packages
are missing we can’t tell for a sure that a package isn’t used; it might be
a dependency that we don’t know about.

There are four cases:
\itemize{
\item If it’s used and recorded, call \code{renv::restore()} to install the version
specified in the lockfile.
\item If it’s used and not recorded, call \code{renv::install()} to install it
from CRAN or elsewhere.
\item If it’s not used and recorded, call \code{renv::snapshot()} to
remove it from the lockfile.
\item If it's not used and not recorded, there's nothing to do. This the most
common state because you only use a small fraction of all available
packages in any one project.
}
}

\section{Lockfile vs \code{dependencies()}}{
Now we can resolve problems, with installed packages. This basically amounts
to calling \code{snapshot()} because there are four cases:
\itemize{
\item If it’s used, and recorded, it’s ok.
\item If it’s used, and not recorded, call \code{renv::snapshot()} to add it to the
lockfile.
\item If it’s not used and recorded, call \code{renv::snapshot()} to remove
it from the lockfile.
\item If it’s not used and not recorded, it’s also ok.
}
}

\examples{

\dontrun{

# disable automatic snapshots
auto.snapshot <- getOption("renv.config.auto.snapshot")
options(renv.config.auto.snapshot = FALSE)

# initialize a new project (with an empty R library)
renv::init(bare = TRUE)

# install digest 0.6.19
renv::install("digest@0.6.19")

# save library state to lockfile
renv::snapshot()

# remove digest from library
renv::remove("digest")

# check library status
renv::status()

# restore lockfile, thereby reinstalling digest 0.6.19
renv::restore()

# restore automatic snapshots
options(renv.config.auto.snapshot = auto.snapshot)

}
}
